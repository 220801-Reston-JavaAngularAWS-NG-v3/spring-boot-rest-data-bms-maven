package com.bms.springbootrestdatabmsmaven.service;

import java.util.ArrayList;
import java.util.List;
import java.util.Optional;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.BeanUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;
import org.springframework.stereotype.Service;

import com.bms.springbootrestdatabmsmaven.dao.BookDao;
import com.bms.springbootrestdatabmsmaven.exception.ApplicationException;
import com.bms.springbootrestdatabmsmaven.pojo.BookPojo;
import com.bms.springbootrestrestbmsmaven.entity.BookEntity;

//@Component // use stereotype annotation @Service instead
@Service // this tells the spring framenwork that this class is a bean
public class BookServiceImpl implements BookService{

	// Logging Step 1 - obtain an instance of Logger
	//private static final Logger logger = LoggerFactory.getLogger(BookServiceImpl.class);
	
	// fill in the code later for each methods 
	// will fill in after the dao layer is done
	
	// BookDao interface reference variable
	@Autowired
	BookDao bookDao; // this is the preferred way as the class is abstracted through the interface reference variable
	
	//BookDaoArrayImpl bookDao; // is highly not recomended as we need to abstract the class
		
	public BookServiceImpl() {
		// the interface reference variable points to the jdbc implementation class
		// this line is no longer needed after we have autowired bookDao
		// bookDao = new BookDaoJdbcImpl();
	}

	// the methods in my service layer don't do anything much, they just call the respective dao methods
	@Override
	public List<BookPojo> getAllBooks(){
		//logger.info("Entered getAllBooks() in service layer...");
		//return bookDao.getAllBooks();
		List<BookEntity> allBooksEntity = bookDao.findAll();
		// but this method should returna collection of book pojo
		// so copy all the contetns of bookentity into book pojo
		List<BookPojo> allBooksPojo = new ArrayList<BookPojo>();
		
		allBooksEntity.forEach((eachEntity)->allBooksPojo.add(new BookPojo(eachEntity.getBookId(), eachEntity.getBookTitle(), eachEntity.getBookAuthor(), eachEntity.getBookGenre(), eachEntity.getBookCost(), eachEntity.getBookImageUrl())));
		//allBooksEntity.forEach((eachEntity)->allBooksPojo.add(BeanUtils.copyProperties(eachEntity, new BookPojo())));
		//logger.info("Exited getAllBooks() in service layer...");
		return allBooksPojo;
	}

	@Override
	public BookPojo addBook(BookPojo bookPojo){
		//logger.info("Entered getAllBooks() in service layer...");
		//return bookDao.addBook(bookPojo);
		BookEntity newBookEntity = new BookEntity();
		BeanUtils.copyProperties(bookPojo, newBookEntity); // copying the book pojo into a book entity
		bookDao.saveAndFlush(newBookEntity); // save the entity object in the db
											// this will return the autogenretaed primary key
		bookPojo.setBookId(newBookEntity.getBookId()); // we are copying the autogenerated bookId present in the book entity to the book pojo
		//logger.info("Exited getAllBooks() in service layer...");
		return bookPojo;
	}

	@Override
	public BookPojo updateBook(BookPojo bookPojo){
		//logger.info("Entered updateBook() in service layer...");
		//return bookDao.updateBook(bookPojo);
		BookEntity newBookEntity = new BookEntity();
		BeanUtils.copyProperties(bookPojo, newBookEntity); // copying the book pojo into a book entity
		bookDao.save(newBookEntity); // save the entity object in the db
											// save here works as update because the primary key is present in the DB
		//logger.info("Exited updateBook() in service layer...");
		return bookPojo;
	}

	@Override
	public void deleteBook(int bookId){
		//logger.info("Entered deleteBook() in service layer...");
		//bookDao.deleteBook(bookId);
		bookDao.deleteById(bookId);
		//logger.info("Exited deleteBook() in service layer...");
		
	}

	@Override
	public BookPojo getABook(int bookId){
		//logger.info("Entered getABook() in service layer...");
		//return bookDao.getABook(bookId);
		Optional<BookEntity> optionalBookEntity = bookDao.findById(bookId);
		BookPojo fetchedBookPojo = null;
		if(optionalBookEntity.isPresent()) {
			fetchedBookPojo = new BookPojo();;
			BeanUtils.copyProperties(optionalBookEntity.get(), fetchedBookPojo);
		}
		//logger.info("Exited getABook() in service layer...");
		return fetchedBookPojo;
	}

}
